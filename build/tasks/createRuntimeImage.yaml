apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-runtime-image
spec:
  params:
    - name: TLSVERIFY
      type: string
      default: 'false'
    - name: STORAGE_DRIVER
      type: string
    - name: gitrepository_url
      type: string
    - name: gitrepository_fullname
      type: string
    - name: commit_prior_revision
      type: string
    - name: commit_ref
      type: string
    - name: commit_id
      type: string
    - name: commit_date
      type: string
    - name: commit_message
      type: string
    - name: commit_author
      type: string  
    - name: pipelineName
      type: string
    - name: pipelineRunName
      type: string      
    - name: intermediate-image
      type: string
    - name: runtime-image
      type: string
  steps:
    - name: gen-binary-extraction-dockerfile
      command:
        - /bin/sh
        - '-c'
      args:
        - |-
          echo "FROM $(params.intermediate-image) as intermediate-image" > ext-dockerfile.gen
          echo "FROM docker.io/openliberty/open-liberty as runtime-image" >> ext-dockerfile.gen
          echo "RUN ls -alR /tmp" >> ext-dockerfile.gen
          echo "COPY --from=intermediate-image /tmp/target/liberty-rest-app.war /config/apps/liberty-rest-app.war" >> ext-dockerfile.gen
          echo "COPY --from=intermediate-image /tmp/target/config/server.xml /config/server.xml" >> ext-dockerfile.gen
          echo "LABEL github.repository.url=\"$(params.gitrepository_url)\" \\" >> ext-dockerfile.gen
          echo "github.repository.fullname=\"$(params.gitrepository_fullname)\" \\" >> ext-dockerfile.gen
          echo "github.commit.ref=\"$(params.commit_ref)\" \\" >> ext-dockerfile.gen
          echo "github.commit.id=\"$(params.commit_id)\" \\" >> ext-dockerfile.gen
          echo "github.commit.message=\"$(params.commit_message)\" \\" >> ext-dockerfile.gen
          echo "github.commit.date=\"$(params.commit_date)\" \\" >> ext-dockerfile.gen
          echo "github.commit_author=\"$(params.commit_author)\" \\" >> ext-dockerfile.gen
          echo "pipeline.name=\"$(params.pipelineName)\" \\" >> ext-dockerfile.gen
          echo "pipeline.run=\"$(params.pipelineRunName)\" \\" >> ext-dockerfile.gen
          echo "pipeline.task.run.name=\"$(context.taskRun.name)\"" >> ext-dockerfile.gen
          echo "------------------------------"
          cat ext-dockerfile.gen
          echo "------------------------------"
      image: registry.redhat.io/ocp-tools-43-tech-preview/source-to-image-rhel8
      securityContext:
        capabilities:
          add: ["SETFCAP"]
      volumeMounts:
        - name: envparams
          mountPath: /env-params
      workingDir: /env-params
    - name: extract-built-object
      command:
        - buildah
        - bud
        - '--tls-verify=$(params.TLSVERIFY)'
        - '--storage-driver=$(params.STORAGE_DRIVER)'
        - '--layers'
        - '--root'
        - '/files/buildah-containers'
        - '-f'
        - ext-dockerfile.gen
        - '-t'
        - $(params.runtime-image)
        - .
      image: registry.redhat.io/rhel8/buildah
      securityContext:
        capabilities:
          add: ["SETFCAP"]
      resources: {}
      volumeMounts:
        - name: envparams
          mountPath: /env-params
      workingDir: /env-params
    - name: view-images
      command:
        - buildah
        - images
        - '--root'
        - '/files/buildah-containers'
        - '--storage-driver=$(params.STORAGE_DRIVER)'
      image: registry.redhat.io/rhel8/buildah
      securityContext:
        capabilities:
          add: ["SETFCAP"]
      resources: {}
    - name: push-image-to-openshift
      command:
        - buildah
        - push
        - '--storage-driver=$(params.STORAGE_DRIVER)'
        - '--tls-verify=$(params.TLSVERIFY)'
        - '--root'
        - '/files/buildah-containers'
        - $(params.runtime-image)
        - 'docker://$(resources.outputs.runtime-image.url)'
      image: registry.redhat.io/rhel8/buildah
      securityContext:
        capabilities:
          add: ["SETFCAP"]
      resources: {}
  volumes:
    - emptyDir: {}
      name: envparams
    - emptyDir: {}
      name: gen-source
  workspaces:
  - name: files
    mountPath: /files
